#!/usr/bin/env python3
#
# This contrib script ensures that all webhooks are configured with the latest
# version of the webhook payload.

from flask import url_for
from hubsrht.app import app
from hubsrht.services.lists import ListsClient
from hubsrht.blueprints.mailing_lists import LIST_WEBHOOK_VERSION
from srht.config import cfg, get_origin
from srht.database import DbSession
from srht.graphql import InternalAuth

connection_string = cfg("hub.sr.ht", "connection-string")
db = DbSession(connection_string)
db.create()

from hubsrht.types import MailingList

_listsrht = get_origin("lists.sr.ht", default=None)
_hubsrht = get_origin("hub.sr.ht", default=None)

def remove_previous_gql_webhook(client, mailing_list):
    if (mailing_list.webhook_id == -1
        and mailing_list.webhook_version == LIST_WEBHOOK_VERSION):
        return

    try:
        client = ListsClient(auth=InternalAuth(mailing_list.owner))
        client.delete_list_webhook(mailing_list.webhook_id)
        mailing_list.webhook_id = -1
        mailing_list.webhook_version = 0
    except Exception as ex:
        print(f"Warning: failed to remove previous webhook ID {mailing_list.webhook_id} for mailing list ID {mailing_list.id}")
        print(ex)

print("Updating webhooks...")

external_origin = get_origin("hub.sr.ht", external=True)
external_origin = external_origin.removeprefix("http://")
external_origin = external_origin.removeprefix("https://")
app.config['SERVER_NAME'] = external_origin
with app.app_context():
    for mailing_list in MailingList.query.all():
        client = ListsClient(auth=InternalAuth(mailing_list.owner))

        if (mailing_list.webhook_id != -1
            and mailing_list.webhook_version == LIST_WEBHOOK_VERSION):
            continue

        if mailing_list.webhook_id != -1:
            remove_previous_gql_webhook(client, mailing_list)

        print(f"Update {mailing_list.owner.canonical_name}/{mailing_list.name} (ID: {mailing_list.remote_id})")
        try:
            webhook_url = url_for("webhooks.project_mailing_list", list_id=mailing_list.id)
            mailing_list.webhook_id = client.create_list_webhook(
                    list_id=mailing_list.remote_id,
                    payload=ListsClient.event_webhook_query,
                    url=webhook_url).webhook.id
            mailing_list.webhook_version = LIST_WEBHOOK_VERSION
        except Exception as ex:
            print(f"Warning: failed to update mailing list {mailing_list.remote_id}: {ex}")

    db.session.commit()

print("Done.")
