query GetRepos($cursor: Cursor) {
  me {
    repositories(cursor: $cursor) {
      results {
        id
        name
        updated
        owner {
          canonicalName
        }
      }
      cursor
    }
  }
}

query GetRepo($repoName: String!) {
  me {
    repository(name: $repoName) {
      id
      name
      description
      visibility
    }
  }
}

query GetReadme($username: String!, $repoName: String!) {
  user(username: $username) {
    repository(name: $repoName) {
      html: readme
      md: path(path: "README.md") { ...textData }
      markdown: path(path: "README.markdown") { ...textData }
      plaintext: path(path: "README") { ...textData }
    }
  }
}

fragment textData on TreeEntry {
  object {
    __typename
    ... on TextBlob {
      text
    }
  }
}

query GetManifests($username: String!, $repo_name: String!) {
  user(username: $username) {
    repository(name: $repo_name) {
      name
      visibility

      multiple: path(path:".builds") {
        object {
          ... on Tree {
            entries {
              results {
                name
                object { ... on TextBlob { text } }
              }
            }
          }
        }
      },
      singleYML: path(path:".build.yml") {
        object {
          ... on TextBlob { text }
        }
      },
      singleYAML: path(path:".build.yaml") {
        object {
          ... on TextBlob { text }
        }
      }
    }
  }
}

mutation CreateRepo(
  $name: String!,
  $visibility: Visibility!,
  $description: String,
) {
  repository: createRepository(
    name: $name,
    description: $description,
    visibility: $visibility,
  ) {
    id
    name
    description
    visibility
  }
}

mutation DeleteRepo($repo_id: Int!) {
  deleteRepository(id: $repo_id) { id }
}

mutation CreateUserWebhook(
  $payload: String!
  $url: String!,
) {
  webhook: createUserWebhook(config: {
    url: $url,
    events: [
      REPO_UPDATE,
      REPO_DELETED,
    ],
    query: $payload
  }) { id }
}

mutation DeleteUserWebhook($id: Int!) {
  deleteUserWebhook(id: $id) { id }
}

mutation CreateRepoWebhook(
  $repoID: Int!,
  $payload: String!,
  $url: String!,
) {
  webhook: createGitWebhook(config: {
    repositoryID: $repoID,
    url: $url,
    query: $payload,
    events: [GIT_POST_RECEIVE],
  }) { id }
}

mutation DeleteRepoWebhook($id: Int!) {
  deleteGitWebhook(id: $id) { id }
}

query EventWebhook {
  webhook {
    uuid
    event
    date

    ... on RepositoryEvent {
      repository {
        id
        name
        description
        visibility
      }
    }

    ... on GitEvent {
      pusher {
        canonicalName

        ... on User {
          username
        }
      }

      updates {
        old {
          id
        }

        new {
          id
          shortId

          ... on Commit {
            message
          }
        }

        log {
          results {
            id
            message
            author {
              name
            }
          }
        }
      }
    }
  }
}
